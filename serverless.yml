service: snapit-burn-api

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'prod'}

  # API Gateway configuration
  apiGateway:
    metrics: true
    shouldStartNameWithService: true

  environment:
    BURNS_TABLE: ${self:service}-burns-${self:provider.stage}
    DOWNLOADS_TABLE: ${self:service}-downloads-${self:provider.stage}
    BURN_BUCKET: ${self:service}-files-${self:provider.stage}
    USERS_TABLE: snapit-forum-api-users-${self:provider.stage}  # Shared
    JWT_SECRET: ${ssm:/snapit-forum/prod/JWT_SECRET}
    STRIPE_SECRET_KEY: ${ssm:/snapit-forum/prod/STRIPE_SECRET_KEY}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BURNS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BURNS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOWNLOADS_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.BURN_BUCKET}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetBucketLocation
          Resource:
            - "arn:aws:s3:::${self:provider.environment.BURN_BUCKET}"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - "arn:aws:ssm:${self:provider.region}:*:parameter/snapit-forum/prod/*"
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: "*"

package:
  patterns:
    - '!burn-app/**'
    - '!.git/**'

functions:
  # Shared authorizer
  authorizer:
    handler: src/handlers/auth.authorizer

  # Upload (anonymous or authenticated)
  upload:
    handler: src/handlers/burns.upload
    timeout: 30
    events:
      - http:
          path: burns
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
            methods:
              - OPTIONS
              - POST

  # Get burn metadata (before download)
  getBurn:
    handler: src/handlers/burns.get
    events:
      - http:
          path: burns/{burnId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
            methods:
              - OPTIONS
              - GET

  # Download file (consumes download count)
  download:
    handler: src/handlers/burns.download
    events:
      - http:
          path: burns/{burnId}/download
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
            methods:
              - OPTIONS
              - POST

  # List user's burns (authenticated)
  listBurns:
    handler: src/handlers/burns.list
    events:
      - http:
          path: burns
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
            methods:
              - OPTIONS
              - GET
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0

  # Delete burn manually
  deleteBurn:
    handler: src/handlers/burns.delete
    events:
      - http:
          path: burns/{burnId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
            methods:
              - OPTIONS
              - DELETE
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0

resources:
  Resources:
    BurnsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BURNS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: burnId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: burnId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true

    DownloadsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DOWNLOADS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: downloadId
            AttributeType: S
          - AttributeName: burnId
            AttributeType: S
        KeySchema:
          - AttributeName: downloadId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: BurnIndex
            KeySchema:
              - AttributeName: burnId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    BurnBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BURN_BUCKET}
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldFiles
              Status: Enabled
              ExpirationInDays: 30
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedHeaders:
                - '*'

    # API Gateway Usage Plan (enterprise-grade rate limiting)
    ApiGatewayUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      DependsOn: ApiGatewayRestApi
      Properties:
        UsagePlanName: snapit-burn-${self:provider.stage}
        Description: Usage plan for SnapIT Burn API
        Throttle:
          BurstLimit: 300
          RateLimit: 150
        Quota:
          Limit: 1000000
          Period: MONTH
        ApiStages:
          - ApiId:
              Ref: ApiGatewayRestApi
            Stage: ${self:provider.stage}

    # API Key for monitoring and advanced usage tracking
    ApiGatewayApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: snapit-burn-api-key-${self:provider.stage}
        Description: API key for SnapIT Burn
        Enabled: true

    # Link API Key to Usage Plan
    ApiGatewayUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId:
          Ref: ApiGatewayApiKey
        KeyType: API_KEY
        UsagePlanId:
          Ref: ApiGatewayUsagePlan
